cat('\n')
break
}
if (HeaderRead$KPER > max(SP_rng)) {
cat('\n')
break
}
# Display % complete
cat(paste('\r',format(as.numeric(HeaderRead$KPER) / max(SP_rng) * 100,digits = 2,nsmall = 2),"%"))
}
return(listOfPnts)
}
to.read <- file(headsFile, "rb")
#pointValues <- as.matrix(readHeadsbinAtPnts(to.read, SP_rng, PointVector))
pointValues <- readHeadsbinAtPnts(to.read, SP_rng, PointVector)
newRecs<-cbind(do.call(rbind,replicate(length(SP_rng),PointNames, simplify=FALSE)),pointValues)
temp <- dcast(newRecs,Station+ROW+COL+LAY ~SP,value.var="Head")
close(to.read)
View(PointNames)
readHeadsbinAtPnts <- function(filPtr, SP_rng, PointVector) {
bigVector <- vector('numeric')
HeaderRead <- readHeadsHeader(filPtr)
kntFloats <- HeaderRead$K * HeaderRead$NR * HeaderRead$NC
Lay1floats <- HeaderRead$NR * HeaderRead$NC
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
listOfPnts = data.frame(heads=double())
i <- 1
cat(paste("0%.."))
repeat {
HeaderRead <- readHeadsHeader(filPtr)
# Don't read past EOF
if (length(HeaderRead) > 0) {
if (is.element(HeaderRead$KPER, SP_rng) &&
HeaderRead$KPER <= max(SP_rng)) {
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
if (HeaderRead$K == 1){
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[349,179,1])
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[346,180,1])
print(mean(bigVector))
}
if (HeaderRead$K == M$nlays){
HeadsMatrix<- array(bigVector,c(M$ncols,M$nrows,M$nlays))
df1SP <-as.data.frame(HeadsMatrix[PointVector])
names(df1SP)<-c("Head")
df1SP$SP <- HeaderRead$KPER
listOfPnts <- rbind(listOfPnts,df1SP)
}
} else {
cat(paste('skipping a layer\n'))
seek(filPtr, (Lay1floats * 4), origin = 'current')
}
}
# don't read everything unless necessary
if (length(HeaderRead) == 0) {
cat('\n')
break
}
if (HeaderRead$KPER > max(SP_rng)) {
cat('\n')
break
}
# Display % complete
cat(paste('\r',format(as.numeric(HeaderRead$KPER) / max(SP_rng) * 100,digits = 2,nsmall = 2),"%"))
}
return(listOfPnts)
}
to.read <- file(headsFile, "rb")
#pointValues <- as.matrix(readHeadsbinAtPnts(to.read, SP_rng, PointVector))
pointValues <- readHeadsbinAtPnts(to.read, SP_rng, PointVector)
newRecs<-cbind(do.call(rbind,replicate(length(SP_rng),PointNames, simplify=FALSE)),pointValues)
temp <- dcast(newRecs,Station+ROW+COL+LAY ~SP,value.var="Head")
close(to.read)
View(df1SP)
View(PointNames)
readHeadsbinAtPnts <- function(filPtr, SP_rng, PointVector) {
bigVector <- vector('numeric')
HeaderRead <- readHeadsHeader(filPtr)
kntFloats <- HeaderRead$K * HeaderRead$NR * HeaderRead$NC
Lay1floats <- HeaderRead$NR * HeaderRead$NC
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
listOfPnts = data.frame(heads=double())
i <- 1
cat(paste("0%.."))
repeat {
HeaderRead <- readHeadsHeader(filPtr)
# Don't read past EOF
if (length(HeaderRead) > 0) {
if (is.element(HeaderRead$KPER, SP_rng) &&
HeaderRead$KPER <= max(SP_rng)) {
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
if (HeaderRead$K == 1){
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[349,179,1])
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[346,180,1])
print(mean(bigVector))
}
if (HeaderRead$K == M$nlays){
HeadsMatrix<- array(bigVector,c(M$ncols,M$nrows,M$nlays))
df1SP <-as.data.frame(HeadsMatrix[PointVector])
print (df1SP[60])
names(df1SP)<-c("Head")
df1SP$SP <- HeaderRead$KPER
listOfPnts <- rbind(listOfPnts,df1SP)
}
} else {
cat(paste('skipping a layer\n'))
seek(filPtr, (Lay1floats * 4), origin = 'current')
}
}
# don't read everything unless necessary
if (length(HeaderRead) == 0) {
cat('\n')
break
}
if (HeaderRead$KPER > max(SP_rng)) {
cat('\n')
break
}
# Display % complete
cat(paste('\r',format(as.numeric(HeaderRead$KPER) / max(SP_rng) * 100,digits = 2,nsmall = 2),"%"))
}
return(listOfPnts)
}
to.read <- file(headsFile, "rb")
#pointValues <- as.matrix(readHeadsbinAtPnts(to.read, SP_rng, PointVector))
pointValues <- readHeadsbinAtPnts(to.read, SP_rng, PointVector)
newRecs<-cbind(do.call(rbind,replicate(length(SP_rng),PointNames, simplify=FALSE)),pointValues)
temp <- dcast(newRecs,Station+ROW+COL+LAY ~SP,value.var="Head")
close(to.read)
print (df1SP[,60])
print (df1SP[1,60])
df1SP
print (df1SP$Head[60])
readHeadsbinAtPnts <- function(filPtr, SP_rng, PointVector) {
bigVector <- vector('numeric')
HeaderRead <- readHeadsHeader(filPtr)
kntFloats <- HeaderRead$K * HeaderRead$NR * HeaderRead$NC
Lay1floats <- HeaderRead$NR * HeaderRead$NC
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
listOfPnts = data.frame(heads=double())
i <- 1
cat(paste("0%.."))
repeat {
HeaderRead <- readHeadsHeader(filPtr)
# Don't read past EOF
if (length(HeaderRead) > 0) {
if (is.element(HeaderRead$KPER, SP_rng) &&
HeaderRead$KPER <= max(SP_rng)) {
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
if (HeaderRead$K == 1){
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[349,179,1])
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[346,180,1])
print(mean(bigVector))
}
if (HeaderRead$K == M$nlays){
HeadsMatrix<- array(bigVector,c(M$ncols,M$nrows,M$nlays))
df1SP <-as.data.frame(HeadsMatrix[PointVector])
print (df1SP$Head[60])
print (df1SP$Head[61])
names(df1SP)<-c("Head")
df1SP$SP <- HeaderRead$KPER
listOfPnts <- rbind(listOfPnts,df1SP)
}
} else {
cat(paste('skipping a layer\n'))
seek(filPtr, (Lay1floats * 4), origin = 'current')
}
}
# don't read everything unless necessary
if (length(HeaderRead) == 0) {
cat('\n')
break
}
if (HeaderRead$KPER > max(SP_rng)) {
cat('\n')
break
}
# Display % complete
cat(paste('\r',format(as.numeric(HeaderRead$KPER) / max(SP_rng) * 100,digits = 2,nsmall = 2),"%"))
}
return(listOfPnts)
}
to.read <- file(headsFile, "rb")
#pointValues <- as.matrix(readHeadsbinAtPnts(to.read, SP_rng, PointVector))
pointValues <- readHeadsbinAtPnts(to.read, SP_rng, PointVector)
newRecs<-cbind(do.call(rbind,replicate(length(SP_rng),PointNames, simplify=FALSE)),pointValues)
temp <- dcast(newRecs,Station+ROW+COL+LAY ~SP,value.var="Head")
close(to.read)
readHeadsbinAtPnts <- function(filPtr, SP_rng, PointVector) {
bigVector <- vector('numeric')
HeaderRead <- readHeadsHeader(filPtr)
kntFloats <- HeaderRead$K * HeaderRead$NR * HeaderRead$NC
Lay1floats <- HeaderRead$NR * HeaderRead$NC
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
listOfPnts = data.frame(heads=double())
i <- 1
cat(paste("0%.."))
repeat {
HeaderRead <- readHeadsHeader(filPtr)
# Don't read past EOF
if (length(HeaderRead) > 0) {
if (is.element(HeaderRead$KPER, SP_rng) &&
HeaderRead$KPER <= max(SP_rng)) {
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
if (HeaderRead$K == 1){
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[349,179,1])
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[346,180,1])
print(mean(bigVector))
}
if (HeaderRead$K == M$nlays){
HeadsMatrix<- array(bigVector,c(M$ncols,M$nrows,M$nlays))
df1SP <-as.data.frame(HeadsMatrix[PointVector])
print (df1SP$Head[60])
print (df1SP$Head[61])
names(df1SP)<-c("Head")
df1SP$SP <- HeaderRead$KPER
listOfPnts <- rbind(listOfPnts,df1SP)
}
} else {
cat(paste('skipping a layer\n'))
seek(filPtr, (Lay1floats * 4), origin = 'current')
}
}
# don't read everything unless necessary
if (length(HeaderRead) == 0) {
cat('\n')
break
}
if (HeaderRead$KPER > max(SP_rng)) {
cat('\n')
break
}
# Display % complete
cat(paste('\r',format(as.numeric(HeaderRead$KPER) / max(SP_rng) * 100,digits = 2,nsmall = 2),"%"))
}
return(listOfPnts)
}
PointVector
readHeadsbinAtPnts <- function(filPtr, SP_rng, PointVector) {
bigVector <- vector('numeric')
HeaderRead <- readHeadsHeader(filPtr)
kntFloats <- HeaderRead$K * HeaderRead$NR * HeaderRead$NC
Lay1floats <- HeaderRead$NR * HeaderRead$NC
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
listOfPnts = data.frame(heads=double())
i <- 1
cat(paste("0%.."))
repeat {
HeaderRead <- readHeadsHeader(filPtr)
# Don't read past EOF
if (length(HeaderRead) > 0) {
if (is.element(HeaderRead$KPER, SP_rng) &&
HeaderRead$KPER <= max(SP_rng)) {
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
if (HeaderRead$K == 1){
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[349,179,1])
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[346,180,1])
}
if (HeaderRead$K == M$nlays){
HeadsMatrix<- array(bigVector,c(M$ncols,M$nrows,M$nlays))
df1SP <-as.data.frame(HeadsMatrix[PointVector])
print (df1SP$Head[60])
print (df1SP$Head[61])
names(df1SP)<-c("Head")
df1SP$SP <- HeaderRead$KPER
listOfPnts <- rbind(listOfPnts,df1SP)
}
} else {
cat(paste('skipping a layer\n'))
seek(filPtr, (Lay1floats * 4), origin = 'current')
}
}
# don't read everything unless necessary
if (length(HeaderRead) == 0) {
cat('\n')
break
}
if (HeaderRead$KPER > max(SP_rng)) {
cat('\n')
break
}
# Display % complete
cat(paste('\r',format(as.numeric(HeaderRead$KPER) / max(SP_rng) * 100,digits = 2,nsmall = 2),"%"))
}
return(listOfPnts)
}
to.read <- file(headsFile, "rb")
#pointValues <- as.matrix(readHeadsbinAtPnts(to.read, SP_rng, PointVector))
pointValues <- readHeadsbinAtPnts(to.read, SP_rng, PointVector)
newRecs<-cbind(do.call(rbind,replicate(length(SP_rng),PointNames, simplify=FALSE)),pointValues)
temp <- dcast(newRecs,Station+ROW+COL+LAY ~SP,value.var="Head")
close(to.read)
print(nobs(bigVector))
print(length(bigVector))
readHeadsbinAtPnts <- function(filPtr, SP_rng, PointVector) {
bigVector <- vector('numeric')
HeaderRead <- readHeadsHeader(filPtr)
kntFloats <- HeaderRead$K * HeaderRead$NR * HeaderRead$NC
Lay1floats <- HeaderRead$NR * HeaderRead$NC
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
listOfPnts = data.frame(heads=double())
i <- 1
cat(paste("0%.."))
repeat {
HeaderRead <- readHeadsHeader(filPtr)
# Don't read past EOF
if (length(HeaderRead) > 0) {
if (is.element(HeaderRead$KPER, SP_rng) &&
HeaderRead$KPER <= max(SP_rng)) {
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
print(length(bigVector))
if (HeaderRead$K == 1){
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[349,179,1])
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[346,180,1])
}
if (HeaderRead$K == M$nlays){
HeadsMatrix<- array(bigVector,c(M$ncols,M$nrows,M$nlays))
df1SP <-as.data.frame(HeadsMatrix[PointVector])
print (df1SP$Head[60])
print (df1SP$Head[61])
names(df1SP)<-c("Head")
df1SP$SP <- HeaderRead$KPER
listOfPnts <- rbind(listOfPnts,df1SP)
}
} else {
cat(paste('skipping a layer\n'))
seek(filPtr, (Lay1floats * 4), origin = 'current')
}
}
# don't read everything unless necessary
if (length(HeaderRead) == 0) {
cat('\n')
break
}
if (HeaderRead$KPER > max(SP_rng)) {
cat('\n')
break
}
# Display % complete
cat(paste('\r',format(as.numeric(HeaderRead$KPER) / max(SP_rng) * 100,digits = 2,nsmall = 2),"%"))
}
return(listOfPnts)
}
to.read <- file(headsFile, "rb")
#pointValues <- as.matrix(readHeadsbinAtPnts(to.read, SP_rng, PointVector))
pointValues <- readHeadsbinAtPnts(to.read, SP_rng, PointVector)
newRecs<-cbind(do.call(rbind,replicate(length(SP_rng),PointNames, simplify=FALSE)),pointValues)
temp <- dcast(newRecs,Station+ROW+COL+LAY ~SP,value.var="Head")
close(to.read)
readHeadsbinAtPnts <- function(filPtr, SP_rng, PointVector) {
bigVector <- vector('numeric')
HeaderRead <- readHeadsHeader(filPtr)
kntFloats <- HeaderRead$K * HeaderRead$NR * HeaderRead$NC
Lay1floats <- HeaderRead$NR * HeaderRead$NC
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
listOfPnts = data.frame(heads=double())
i <- 1
cat(paste("0%.."))
repeat {
HeaderRead <- readHeadsHeader(filPtr)
# Don't read past EOF
if (length(HeaderRead) > 0) {
if (is.element(HeaderRead$KPER, SP_rng) &&
HeaderRead$KPER <= max(SP_rng)) {
HeadBlock <- readBin(filPtr, double(), n = Lay1floats, size = 4)
bigVector <- c(bigVector, HeadBlock[1:Lay1floats])
print(length(bigVector))
if (HeaderRead$K == 1){
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[349,179,1])
print(array(bigVector,c(M$ncols,M$nrows,M$nlays))[346,180,1])
}
if (HeaderRead$K == M$nlays){
HeadsMatrix<- array(bigVector,c(M$ncols,M$nrows,M$nlays))
bigVector <-NULL
df1SP <-as.data.frame(HeadsMatrix[PointVector])
print (df1SP$Head[60])
print (df1SP$Head[61])
names(df1SP)<-c("Head")
df1SP$SP <- HeaderRead$KPER
listOfPnts <- rbind(listOfPnts,df1SP)
}
} else {
cat(paste('skipping a layer\n'))
seek(filPtr, (Lay1floats * 4), origin = 'current')
}
}
# don't read everything unless necessary
if (length(HeaderRead) == 0) {
cat('\n')
break
}
if (HeaderRead$KPER > max(SP_rng)) {
cat('\n')
break
}
# Display % complete
cat(paste('\r',format(as.numeric(HeaderRead$KPER) / max(SP_rng) * 100,digits = 2,nsmall = 2),"%"))
}
return(listOfPnts)
}
to.read <- file(headsFile, "rb")
#pointValues <- as.matrix(readHeadsbinAtPnts(to.read, SP_rng, PointVector))
pointValues <- readHeadsbinAtPnts(to.read, SP_rng, PointVector)
newRecs<-cbind(do.call(rbind,replicate(length(SP_rng),PointNames, simplify=FALSE)),pointValues)
temp <- dcast(newRecs,Station+ROW+COL+LAY ~SP,value.var="Head")
close(to.read)
source('//ad.sfwmd.gov/dfsroot/data/wsd/SUP/devel/source/R/rModflow/R/modflowDataFuncs.R')
source ("//ad.sfwmd.gov/dfsroot/data/wsd/SUP/devel/source/R/ReusableFunctions/tclFuncs.R")
#=================================================================
# Beginning of Script
#
# Created by Kevin A. Rodberg - February 2018
#
# Purpose: Create series of raster figures to review Modflow Binary data
#          and large ET or Recharge datasets/
#=================================================================
# Choose Modflow Binary Heads file
#=================================================================
MFmodel.Params <- defineMFmodel()
model <- chooseModel()
M <- as.data.frame(MFmodel.Params[model,])
winA <- tktoplevel()
msg = paste('Identify Binary Heads file for :', model)
lbl.message <- tk2label(winA, text = msg, font = fontHeading)
tkgrid(lbl.message, padx = 30)
tkraise(winA)
mpath <- toString(MFmodel.Params[model,]$mpath)
headsFile<-choose.files(default=mpath)
tkdestroy(winA)
if (length(headsFile) == 0) {
exit("User cancelled HeadsFile choice")
}
to.read = file(headsFile, "rb")
#===============================================
# Estimate number of stress periods in Heads file
#===============================================
fileSz <- file.info(headsFile)$size
TtlStrPd = fileSz / ( M$nlays * ((M$ncols * M$nrows * 4) + 44))
#===============================================
# Define range of Stress Periods to read
#===============================================
SP_rng <- readRange()
if (max(SP_rng) > TtlStrPd || min(SP_rng) < 1) {
exit('Out of Range')
}
wellfile = "//whqhpc01p/hpcc_shared/jgidding/LECSR/LOX18/ALT2/wellinfo.prn.stage"
PointNames <- read.table(wellfile, header = TRUE, sep = "")
#rownames(PointNames)<-PointNames$Station
#PointNames$Station <- NULL
Kpnts<-nrow(PointNames)
PointNames<-PointNames[,c(1,4,2,3)]
names(PointNames)
#meltPoints<-as.vector(melt(PointNames)$value)
#PointVector<-array(meltPoints,c(Kpnts,3))
#===============================================
# Retrieve Heads by Layer
#===============================================
to.read <- file(headsFile, "rb")
#pointValues <- as.matrix(readHeadsbinAtPnts(to.read, SP_rng, PointVector))
pointValues <- readHeadsbinAtPnts(to.read, SP_rng, PointVector)
newRecs<-cbind(do.call(rbind,replicate(length(SP_rng),PointNames, simplify=FALSE)),pointValues)
temp <- dcast(newRecs,Station+ROW+COL+LAY ~SP,value.var="Head")
close(to.read)
View(temp)
source('Y:/devel/source/R/budgetGraphs/budgetGraphs.R')
source('Y:/devel/source/R/budgetGraphs/budgetGraphs.R')
source('Y:/devel/source/R/budgetGraphs/budgetGraphs.R')
ist.of.packages <-c("reshape2","ggplot2","grDevices","rasterVis","maptools","future","listenv","classInt",
"rgdal","rgeos","tcltk2","RCurl","githubinstall","rModflow")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
if ("rModflow" %in% new.packages) githubinstall("KevinRodberg/Modflow")
library(reshape2)
library(ggplot2)
library(grDevices)
library(rasterVis)
library(maptools)
library(future)
library(listenv)
library(classInt)
library(RCurl)
library(githubinstall)
library(rModflow)
ggplotColours <- function(n = 6, h = c(0, 360) + 15) {
hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}
options(warn = -1)
options(scipen = 100000)
source_github <- function(u) {
# read script lines from website
script <- getURL(u, ssl.verifypeer = FALSE)
script<-strsplit(script,"\r\n")
# parase lines and evealuate in the global environement
eval(parse(text = unlist(script)),envir=.GlobalEnv)
}
source ("//ad.sfwmd.gov/dfsroot/data/wsd/SUP/devel/source/R/ResuableFunctions/tclFuncs.R")
source_github("https://raw.githubusercontent.com/KevinRodberg/ReusableFunctions/master/rasterFuncs.R")
source_github("https://raw.githubusercontent.com/KevinRodberg/ReusableFunctions/master/gisFuncs.R")
source ("//ad.sfwmd.gov/dfsroot/data/wsd/SUP/devel/source/R/ReusableFunctions/tclFuncs.R")
source('Y:/devel/source/R/budgetGraphs/budgetGraphs.R')
